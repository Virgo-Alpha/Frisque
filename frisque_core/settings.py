"""
Django settings for frisque project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$qwd002fq&p&4nmdds8hi(e(z0lbkw*=a65r#)8!^%$4*vv!wk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks', 

    # Required by allauth
    'django.contrib.sites',

    # allauth apps (order matters, place after Django's auth apps)
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # Google provider for allauth

    # Local apps
    'frisque_core',
    'ai_agents',
    'users',
    'scans'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Add allauth middleware here
]

ROOT_URLCONF = 'frisque_core.urls' # Assuming your main urls.py is in frisque_core/

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],  # Added templates directory for project-level templates
        'APP_DIRS': True, # This tells Django to look for templates inside each app's 'templates' directory
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # allauth context processors (crucial for template rendering)
                # 'allauth.account.context_processors.account',
                # 'allauth.socialaccount.context_processors.socialaccount'
            ],
        },
    },
]

WSGI_APPLICATION = 'frisque_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST'),
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"] # Ensures Django looks for static files in the top-level 'static' directory


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Celery Configuration ---
# We configured RabbitMQ in docker-compose.yml
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "amqp://guest:guest@localhost:5672//")
CELERY_RESULT_BACKEND = "rpc://"  # Using RPC backend is fine for now, can be changed later
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# --- Custom User Model ---
AUTH_USER_MODEL = 'users.User' # Ensure this is correct if you have a custom user model

# --- Authentication & allauth settings ---
SITE_ID = 2 # Required by django.contrib.sites and allauth

# Redirect URLs after login/logout
LOGIN_REDIRECT_URL = '/users/' # Redirect to /users/ after successful login
LOGOUT_REDIRECT_URL = '/'      # Redirect to root (home) after logout

# Django's built-in LOGIN_URL (used by LoginRequiredMixin)
LOGIN_URL = '/login/' # Change to allauth's login URL

# allauth specific account settings
ACCOUNT_LOGOUT_ON_GET = True # IMPORTANT: Allows simple link clicks to log out (convenience vs. strict security)
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Allows users to log in with email
ACCOUNT_EMAIL_REQUIRED = True # Email is mandatory for accounts
ACCOUNT_UNIQUE_EMAIL = True # Each email must be unique
ACCOUNT_USERNAME_REQUIRED = False # Don't require a username
ACCOUNT_EMAIL_VERIFICATION = 'none' # 'none', 'optional', 'mandatory' (Set to 'mandatory' for production)

# Tell allauth to use its email-only signup adapter
# This is crucial for fixing the 'username' field error
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter' # This is the default, but explicitly stating helps

# allauth social account provider settings (for Google OAuth)
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_QUERY_EMAIL = True # Request email address from social account provider
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID', '46904927368-s6qm7k1c5ofg82fs4dljjb7guu8gimcs.apps.googleusercontent.com'), # Replace with your actual Client ID
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET', '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'), # Replace with your actual Client Secret
            'key': '' # Not typically needed for Google
        },
        'SCOPE': [ # Requested permissions from Google
            'profile',
            'email',
        ],
        'AUTH_PARAMS': { # Optional: Additional authentication parameters
            # 'access_type': 'offline', # Uncomment if you need refresh tokens for long-lived access
        }
    }
}

# allauth authentication backend
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Django's built-in backend
    'allauth.account.auth_backends.AuthenticationBackend', # allauth specific backend
]

# allauth forms (optional, but good to have explicit)
ACCOUNT_FORMS = {
    'login': 'allauth.account.forms.LoginForm',
    'signup': 'allauth.account.forms.SignupForm',
}

ACCOUNT_SIGNUP_TEMPLATE = 'users/signup.html'
ACCOUNT_PASSWORD_RESET_TEMPLATE = 'account/password_reset.html' 